SOLID:
	1)Singletone - не делать универсальный класс; каждый класс выполняет свою задачу.
	2)Open-closed: private поля и public методы для доступа.
	3)Liskov substicision principle: наследники при подстановке должны норм работать.
	4)Interface segregation: 
	5)Dependency Inversion Principle: вы не сами определяете зависимости, а предоставляете эту возможность юзерам.(помогает если надо разные объекты подставлять) 
STUPID:
	Синглтон
	Сильная Связанность/Tight Coupling(что-то про методы и их связанность)
	Невозможность тестирования
	Преждевременная оптимизация(пытатья оптимизировать на лету)
	Не дескриптивное присвоение имени(тупой нейминг)
	Дублирование кода

Все классы наследуются от класса Object. Методы, которые определены в классе Object:
toString - по умолчанию дает что то типа ИМЯ_КЛАССА+какой то код,
hashCode - по умолчанию наверное как то хэширует ссылку,
getClass,
equals - по умолчанию сравнивает ссылки.

Наследование — это процесс перенимания классом свойств (методов и полей) другого класса.
Простое наследование - это наследование от родительского класса.
extends — это кодовое слово, используемое для наследования свойств класса. 
Ключевое слово super служит для вызова методов/обращения к полям/вызова конструктора родительского класса
Модификатор final запрещает наследование от класса.
Множественное наследование не реализовано в Java, замена ему осуществляется либо с помощью интерфейсов, либо с помощью композиции классов(если нам нужно сохранить реализацию методов). 
Для наследования от интерфейсов используется кодовое слово implements.

В абстрактном классе можно определить поля и методы, но в то же время нельзя создать объект или экземпляр абстрактного класса. 
Абстрактные классы призваны предоставлять базовый функционал для классов-наследников.
Для обозначения абстрактного класса используется модификатор abstract.
Невозможно использовать конструктор абстрактного класса для создания его объекта.
Кроме обычных методов абстрактный класс может содержать абстрактные методы. Такие методы определяются с помощью ключевого слова abstract и не имеют никакой реализации.

Интерфейс — это ссылочный тип в Java. Он схож с классом. Это совокупность абстрактных методов. Класс реализует интерфейс, таким образом наследуя абстрактные и дефолтные методы интерфейса.
Интерфейс содержит константы(static final), просто static переменные и методы. Все они по дефолту public и это нельзя менять.
Интерфейс может наследоваться от другого интерфейса через ключевое слово extends.
"Методы по умолчанию" обозначаются модификатором default. В таких методах можно прописывать реализацию прямо внутри интерфейса. Иначе это сделать не получится(кроме статик методов).
Класс, реализующий интерфейс должен реализовать все методы интерфейса(кроме default-методов и static методов) или же быть абстрактным(но тогда это нужно будет сделать наследникам). 
Нельзя создать экземпляр интерфейса, но можно сделать интерфейсную переменную(она должна ссылаться на объект класса, реализующего интерфейс)
Отличия от абстрактных классов: 
	В интерфейсе мы не можем вводить нестатические поля, которые потом унаследуются в классе и соответственно методы для работы с ними(напрямую). 
	Интерфейс может связывать сильно разные объекты: муха и самолет, определяя их общее поведение. Абстрактный класс указывает на сильную схожесть себя с потомками.
	Классы могут реализовывать сколько угодно интерфейсов, но наследоваться можно только от одного класса.

Перечисления представляют набор логически связанных констант и методов для работы с ними. 
Внутри перечисления можно задать методы для работы с ним, конструктор. Также можно задать методы для работы с каждой из констант отдельно.
Дефолтные методы для работы с enum:
	Каждое перечисление имеет статический метод values(). Он возвращает массив всех констант перечисления.
	Метод ordinal() возвращает порядковый номер определенной константы (нумерация начинается с 0).

Методы c модификатором final не могут быть изменены в классах наследниках. 
Метод с модификатором static доступен без создания экземпляра класса и может обращатся только к статическим полям и методам.
Поле с модификатором final не может быть изменено после своей инициализации. 
Если поле класса объявлено как static, то будет существовать ровно одно значение этого поля, не зависимо от того, сколько экземпляров класса будет создано, даже если не будет создано ни одного экземпляра.

Переопределение метода - изменение реализации метода родительского класса при неизменной Сигнатуре({типах, порядке, количестве} параметров, типе возвращаемого значения).
В программе мы можем использовать методы с одним и тем же именем, но с разными типами и/или количеством параметров. Такой механизм называется перегрузкой методов (method overloading). 
Если будет разным только тип возвращаемого значения - это не будет перегрузкой и мы получим ошибку компиляции.
При перегрузке методов мы получим несколько различных методов, вызов которых будет зависеть от передаваемых значений.
Возврат коварианта означает, что при переопределении метода возвращаемый тип переопределяющего метода разрешен как подтип возвращаемого типа переопределенного метода.

ФУНКЦИОНАЛЬНОЕ ПРОГРАММИРОВАНИЕ: 
Lambda-выражения – это анонимные функции. Проще говоря, это метод без объявления, т.е. без модификаторов доступа, возвращающие значение и имя.
Lambda-выражения в Java обычно имеют следующий синтаксис (аргументы) -> (тело).
Главное отличие состоит в использовании ключевого слова this. Для анонимных классов ключевое слово ‘this’ обозначает объект анонимного класса, в то время как в lambda-выражении ‘this’ обозначает объект класса, в котором lambda-выражение используется.
Функциональные интерфейсы:
Другое их отличие заключается в способе компиляции. Java компилирует lambda-выражения с преобразованием их в private-методы класса.
Функциональные интерфейсы (Functional Interface) – это интерфейсы только с одним абстрактным методом, объявленным в нем.
Ссылки на методы:
С приходом Java 8 стало возможным писать код в декларативном стиле с помощью ссылок на методы. Для использования необходимо написать оператор :: . (перед :: имя класса, после - метод).
Работают ссылки на методы при условии, что параметры вызываемого метода и параметры в лямбде совпадают.